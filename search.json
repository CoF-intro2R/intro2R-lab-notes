[
  {
    "objectID": "day1.html",
    "href": "day1.html",
    "title": "CoF Intro2R Week 1",
    "section": "",
    "text": "Instructor: Dusty Gannon\n\nMS Statistics, OSU\nPhD Botany and Plant Pathology, OSU\n\n\n\n\nStatistics\nPollination ecology\nPopulation biology and ecology\nR\nStan/JAGS\nC++\nLaTeX\npython(ish)"
  },
  {
    "objectID": "day1.html#expertise",
    "href": "day1.html#expertise",
    "title": "CoF Intro2R Week 1",
    "section": "",
    "text": "Statistics\nPollination ecology\nPopulation biology and ecology\nR\nStan/JAGS\nC++\nLaTeX\npython(ish)"
  },
  {
    "objectID": "day1.html#why-r",
    "href": "day1.html#why-r",
    "title": "CoF Intro2R Week 1",
    "section": "Why R?",
    "text": "Why R?\n\nStatistical analysis\nRelatively easy to learn\nExcellent tools for cleaning, formatting, and analyzing tabular data"
  },
  {
    "objectID": "day1.html#taking-project-organization-to-the-next-level",
    "href": "day1.html#taking-project-organization-to-the-next-level",
    "title": "CoF Intro2R Week 1",
    "section": "Taking project organization to the next level",
    "text": "Taking project organization to the next level\nCollaboration is an important aspect of modern science. How do we work collaboratively on code? Let‚Äôs see the importance of some of the tools you will be introduced to with an example.\n\n\n\n\n\n\nYour turn\n\n\n\n\nOpen your system‚Äôs file manager (Finder for Mac, File Explorer for Windows). Inside your Documents directory, create a new folder called CoF_intro2R. Note the use of - or _ in place of spaces.\nInside this folder, create another called Lab and yet another inside that called Day1.\nInside of the Day1 folder, create a new, blank text file. Copy the following text into the file:\n\na,b,c\n1,2,3\n\nSave the file as eg.csv.\n\nWhat is the name of the .csv file you just created?\n\nOpen RStudio.\n\n\n\n\n\n\n\n\n\nAnswers\n\n\n\n\n\n\nLocal name: eg.csv\nFull name: Something along the lines of N:\\Users\\&lt;username&gt;\\Documents\\CoF_intro2R\\Lab\\Day1\\eg.csv\n\n\n\n\n\nAbsolute vs.¬†relative paths\n\nRelative paths: Paths to a location that is relative to a specified location, such as the location of the current document or a project directory.\nAbsolution paths: Paths to files and locations relative to the root of the file system."
  },
  {
    "objectID": "day1.html#a-short-aside-navigating-rstudio",
    "href": "day1.html#a-short-aside-navigating-rstudio",
    "title": "CoF Intro2R Week 1",
    "section": "A short aside: Navigating RStudio",
    "text": "A short aside: Navigating RStudio\n\n4 Panes\n\nConsole\nEditor - Where you will edit R scripts and other documents\nEnvironment - Where you can see objects stored in memory\nFiles/Viewer - Where you can navigate the file system and see outputs of plots and other visuals.\n\nCustomizing the appearance (Very important üòâ)\n\nTools -&gt; Global options -&gt; Appearance\n\n\nOther important global options\n\nTools -&gt; Global options -&gt; General\n\nIn the Workspace and History settings, adjust the defaults to match the image below.\n\n\n\n\nIf working on a Windows machine, change your default terminal to PowerShell or some similar bash-like terminal by going to Tools -&gt; Global Options -&gt; Terminal and change the options that says New terminals open with‚Ä¶."
  },
  {
    "objectID": "day1.html#back-to-project-organization",
    "href": "day1.html#back-to-project-organization",
    "title": "CoF Intro2R Week 1",
    "section": "Back to project organization",
    "text": "Back to project organization\ntesting\n\n\n\n\n\n\nYour Turn\n\n\n\nIn the terminal tab of the console pane, type\npwd\nCompare the result to your neighbor‚Äôs result. Do you get the same results?\nExplore the file tree of your machine using the command line. The only necessary command is cd (for ‚Äòchange directory‚Äô).\ncd ../\nwill take you up one level (i.e., out one level from the nested structure of the file tree). To go further down or into a specific directory, use\ncd &lt;directory&gt;\nreplacing &lt;directory&gt; with the directory name.\nNote, that you can use the tab key to autocomplete the directory name. So start typing the directory name, then press tab to autocomplete the name.\nFeel free to get lost a bit. If you do,\ncd ~\nwill take you back home üè†.\nFinally, find your way to the Day1 directory you created above.\n\n\nOne of the things that trips people up when they first begin using programming languages to do data analysis is file path management. Good, consistent project organization combined with RProjects can relieve this headache substantially.\n\n\n\n\n\n\nYour Turn\n\n\n\nLet‚Äôs practice loading data into R in order to see how file paths can trip people up and break code in many circumstances.\n\nUse the pwd command in the terminal to see the path to your data file, eg.csv.\nOpen a new RScript file and type the following:\n\n( dat &lt;- read.csv(\"&lt;file-path&gt;\") )\nreplacing &lt;file-path&gt; with the path you got using pwd and appending /eg.csv onto the end of the path.\n\nRun the line using CMD + ENTER, or the ‚ÄúRun‚Äù button at the top of the script pane.\nBelow this line, add the line from your neighbor‚Äôs script. What happens?\nDelete or comment your neighbor‚Äôs line out of your script and save the file to the Day1 directory. Name the file file_paths.R.\n\n\n\n\nA better way\n\n\n\n\n\n\nYour Turn\n\n\n\n\nIn the upper right of RStudio, find the Project dropdown menu. Select Open Project and navigate to your new CoF_intro2R/Labs directory. Open it as an R project.\nOpen the file_paths.R script. Type getwd() (for get working directory). What do you notice?\nReplace your previous line with the relative file path to the data. What do you notice about the line in your script and your neighbor‚Äôs?\nAs an alternative to the simple relative path, you can use the here package for R. To do this, first install the here package using\n\ninstall.packages(\"here\")\nin the R console.\n\nAdd the following line to your script, replacing &lt;relative-path&gt; with the path to the eg.csv file from the root of the project directory.\n\nhere::here()\ndat2 &lt;- read.csv(here::here(\"&lt;relative-path&gt;\"))\nall.equal(dat, dat2)\nü§î Does the first command, here::here(), give the same result for you and your neighbor?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nUsing here::here() in the console will usually not give the same result for two people on two machines because their project directories are stored in different place (literally two different computers with different users).\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe double-colon syntax, package::function(), as we are using with here::here() is a safer way of using functions from packages downloaded from the internet than loading the full library and then calling the function without prefacing with the package name. We will get into packages more later in the workshop, but for now, remember that we can use any function from a downloaded package using this syntax."
  },
  {
    "objectID": "day1.html#key-git-vocabulary",
    "href": "day1.html#key-git-vocabulary",
    "title": "CoF Intro2R Week 1",
    "section": "Key git vocabulary",
    "text": "Key git vocabulary\n\nNouns\n\nrepository/repo: Effectively a folder/directory\nremote: The version of the repo that is hosted on GitHub or some other web-based hosting platform\nlocal: The version of the repo that is stored on your personal computer\nstaging area: A list of files that should be ‚Äútracked‚Äù, or version controlled, using git.\ncommit: When used as a noun, a recorded change or set of changes to the repo.\nbranch1: A separate record of changes to the repo. There is usually a main branch that serves as the reference and feature branches that can be merged with main once the edits to the repo are complete. Branches are useful for collaborative repositories.\npull request2: A set of suggested changes to a repo that can be suggested by a collaborator or, if the repo is public, anyone on the internet. The suggestions can then be reviewed by the owner of the repo and merged or not.\n\n\n\nVerbs\n\nclone: To copy a repo from GitHub that you have admin or collaborator privelages on\nfork: To copy a repo from GitHub (or another host) that you do not have write priveleges to. The only way to contribute to a forked repo is through pull requests.\npull: To sync changes from the remote to your local repo\npush: To sync changes from your local repo to the remote\ncommit: When used as a verb, a set of change for which you want to create a time-stamp/record of the repo at that point in time.\ncommit message:"
  },
  {
    "objectID": "day1.html#a-simple-workflow",
    "href": "day1.html#a-simple-workflow",
    "title": "CoF Intro2R Week 1",
    "section": "A simple workflow",
    "text": "A simple workflow\n\n\n\n\n\ngraph LR\n    A[fa:fa-github Initial state] -.-&gt; D[fa:fa-github updated remote]\n    A -- clone to local --&gt; B(fa:fa-laptop initial local)\n    B -- commit changes --&gt; C(fa:fa-laptop updated local)\n    C -- push changes --&gt; D\n    \nclassDef remote fill:#ececec,stroke:#2d2926,color:#000000;\nclassDef local fill:#81a9ad,stroke:#2d2926,color:#000000;\nclass A,D remote\nclass B,C local\n\n\n\n\n\n\n\nMultiple computers\n\n\n\n\n\ngraph TD\n    A[fa:fa-github Initial state] -.-&gt; E\n    A -- clone to local 1 --&gt; B(fa:fa-laptop initial local 1)\n    A -- clone to local 2 --&gt; C(fa:fa-desktop initial local 2)\n    B -- commit changes --&gt; D(fa:fa-laptop update1 to local 1)\n    D -- push to remote --&gt; E[fa:fa-github update 1 to remote]\n    E -.-&gt; H\n    E -- pull to local 2 --&gt; F(fa:fa-desktop update 1 to local 2)\n    C -. fast forward .-&gt; F\n    F -- commit changes --&gt; G(fa:fa-desktop update 2 local 2)\n    G -- push to remote --&gt; H[fa:fa-github update 2 to remote]\n    \nclassDef remote fill:#ececec,stroke:#2d2926,color:#000000;\nclassDef local1 fill:#81a9ad,stroke:#2d2926,color:#000000;\nclassDef local2 fill:#537380,stroke:#2d2926,color:#FFFFFF;\nclass A,E,H remote\nclass B,D local1\nclass C,F,G local2"
  },
  {
    "objectID": "day1.html#using-git-and-github",
    "href": "day1.html#using-git-and-github",
    "title": "CoF Intro2R Week 1",
    "section": "Using git and GitHub",
    "text": "Using git and GitHub\nLet‚Äôs get some practice with the git workflow while also introducing how your homeworks will be assigned.\n\n\n\n\n\n\nYour Turn\n\n\n\n\nCreate a Homework directory inside your CoF_intro2R directory.\nGo to the Canvas site for this class, Week 1 module. Click the link provided on the Homework 1 page. ‚ÄúAccept‚Äù the assignment. This will take you to GitHub (it may ask you to sign in) and a newly created template repository for you.\nClone the repo to your local computer using one of the two methods below. Clone the repo into the Homework directory.\nFollow the homework instructions for steps 1-3.\nPush your changes up to the remote using one of the three methods below.\n\n\n\n\nUsing git from RStudio\nThe most common git commands have been baked into the RStudio GUI. These include adding files to the staging area, committing and writing commit messages, pushing, and pulling.\n\nIf you are working on a Windows machine, I have found that you often need to specify where your git.exe file is stored and point RStudio to that location. To do so, go to Tools -&gt; Global Options -&gt; Git/SVN, then either browse or supply the filepath to the git executable. For example, for those that downloaded git through GitHub Desktop, the git.exe is located in C:/Users/&lt;username&gt;/AppData/Local/GitHubDesktop/app-&lt;version&gt;/resources/app/git/cmd/git.exe.\n\n\nCloning\nTo clone a repo to your local computer, go to File -&gt; New Project‚Ä¶ -&gt; Version Control -&gt; Git.\nNext, go to your GitHub repo and click the green ‚ÄúCode‚Äù button. Copy the HTTPs URL and paste it into the dialogue box from RStudio. You can then save it to a specific location. This will open the repo as an RProject.\n\n\n\n\n\n\nNote\n\n\n\nIf you set up your ssh keys before the course started (extra credit on homework 0), then be sure to clone your project from GitHub using the ssh protocol, not HTTPs.\n\n\n\n\nPulling\nExcept for immediately after the initial cloning step when you are copying the remote repo to your local machine, the first thing you should do upon opening a repo locally is pull. This merges any new edits that are saved on the remote that you don‚Äôt have locally. This is easily accomplished in RStudio using the blue down arrow ‚¨áÔ∏è on the Git pane.\n\n\nCommitting\nIn the upper right panel of RStudio, you will now see a git tab.\n\nAfter making changes to files, click the green checkmark ‚úîÔ∏è icon that says ‚Äúcommit‚Äù when you hover over it with your mouse. This will bring up a new dialogue box.\nCheck the box next to the file you changed and to which you want to commit the changes. You can see the changes made in the panel at the bottom.\nWrite a commit message in the box that describes the changes made or the state the project is in. Ideally, you should be able to look at commit messages and use them to revert the project back to previous states if necessary.\nPress ‚Äúcommit‚Äù.\n\n\n\nPushing\nOnce you are ready to merge your local changes with the remote repo, press the green up arrow ‚¨ÜÔ∏è in the Git pane of RStudio. The remote repo will be updated with the changes you made during the working session.\n\n\n\nUsing GitHub Desktop\nGitHub Desktop gives the user a GUI with which to interact. To clone a repository to your local computer using GitHub Desktop, open GitHub Desktop and sign into your GitHub account.\n\nCloning a repo\nOnce signed into GitHub from GitHub Desktop, click Clone a Repository from the Internet.... GitHub Desktop should already be linked to your GitHub account, so you just need to search for the repo you want. Clone the repo to the local location you want using the Choose button to navigate to the local path. Then click Clone.\n\n\nPulling\n\nSelect the repo you want to work on. In the top-left corner of GitHub Desktop, you will see a drop-down menu. Click this and select the repository you want to pull changes into.\nIn the top-center of the GitHub Desktop window, check that you are on the correct branch (e.g., main or develop). You can switch branches using the drop-down menu if needed3.\nOn the toolbar at the top, click the Fetch origin button. This will check for any updates or changes made to the repository on GitHub.\nOnce GitHub Desktop checks for updates, the Fetch origin button will change to Pull origin if there are any updates. Click the Pull origin button to download and apply the changes from the remote repository to your local copy.\n\n\n\nCommitting changes\n\nOnce you‚Äôve made changes, open GitHub Desktop. In the Changes tab (on the left panel), you‚Äôll see a list of modified files. Clicking on each file will show a diff view of what was added, deleted, or modified.\nAt the bottom of the Changes tab, you‚Äôll see a text box labeled Summary (required). Enter a descriptive commit message that summarizes the changes you made or the state the repo is in. Again, you want to be able to use these messages to revert the repo back to an older version if necessary.\n\nIf needed, you can add more details about the changes in the ‚ÄúDescription‚Äù field, which appears below the summary box. This is helpful for providing more context about the changes.\n\nBy default, all modified files are selected for the commit. If you don‚Äôt want to commit all the changes, uncheck the files you don‚Äôt want to include in this commit.\nAfter filling in the commit message and selecting the files you want to include, click the ‚ÄúCommit to &lt;branch name&gt;‚Äù button (usually labeled ‚ÄúCommit to main‚Äù or the name of your active branch). This will commit the changes locally.\n\n\n\nPushing\nAfter committing the local changes, click the Push origin button that appears at the top after committing your changes.\n\n\n\nUsing git from the command line\nA final way to use git is from the command line. This is how git was initially inteded to be used, but GUIs have been developed over time.\n\nCloning a repo\nTo clone a repo to your local machine, first, navigate to where you want the repo clone to live.\ncd &lt;path-to-clone-location&gt;\nThen, use the git command clone.\ngit clone &lt;repo-url&gt;\nYou may be asked to provide pass keys or sign in, which may also happen any time you pull or push. To avoid this, set up SSH keys as described here.\n\n\nPulling\nUpon opening a repo, it‚Äôs a good idea to check for changes made to the remote. To do this, you can use\ngit fetch origin\ngit status\nwhich will check for changes and then give you a summary of which files are being tracked, which, have been modified, which are staged, etc. If the local is behind the remote, use\ngit pull\n\n\nCommitting changes\nTo commit changes using the command line, you first need to add modified files to the staging area. To do this, use\ngit add &lt;file_name&gt;\nor\ngit add -A\nto add all modified files.\nNext, commit the modified files using\ngit commit &lt;file_name&gt; -m \"type commit message in quotes after -m flag\"\nor\ngit commit -am \"type commit message here\"\nto commit all changes made to all the staged files using the same message.\n\n\nPushing\nAs you might expect, to push changes up to the remote, you can use\ngit push\nwhich will push all committed changes to GitHub."
  },
  {
    "objectID": "day1.html#footnotes",
    "href": "day1.html#footnotes",
    "title": "CoF Intro2R Week 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWe will not get into using branches much if at all in this workshop.‚Ü©Ô∏é\nI will provide feedback on your homeworks using pull requests.‚Ü©Ô∏é\nWe will not get into using branches much if at all in this workshop.‚Ü©Ô∏é"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CoF-intro2R-workshop",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site hosts lab materials for an introductory R course I designed for incoming graduate students in the College of Forestry at Oregon State University. Feel free to use any of the material that suits your educational needs."
  }
]